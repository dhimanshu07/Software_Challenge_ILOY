// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagementService.DBContext;

namespace TaskManagementService.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20200412095145_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskManagementService.DBContext.Entities.ServiceSubtask", b =>
                {
                    b.Property<int>("SubTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("SubTaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("SubTasks");

                    b.HasData(
                        new
                        {
                            SubTaskId = 1,
                            Description = "d Package",
                            FinishDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(757),
                            Name = "d",
                            StartDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(712),
                            State = "Planned",
                            TaskId = 1
                        },
                        new
                        {
                            SubTaskId = 2,
                            Description = "c Package",
                            FinishDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(2315),
                            Name = "c",
                            StartDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(2290),
                            State = "inProgress",
                            TaskId = 1
                        },
                        new
                        {
                            SubTaskId = 3,
                            Description = "a Package",
                            FinishDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(2348),
                            Name = "a",
                            StartDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(2345),
                            State = "Planned",
                            TaskId = 2
                        },
                        new
                        {
                            SubTaskId = 4,
                            Description = "b Package",
                            FinishDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(2357),
                            Name = "b",
                            StartDate = new DateTime(2020, 4, 12, 10, 51, 44, 923, DateTimeKind.Local).AddTicks(2353),
                            State = "Planned",
                            TaskId = 2
                        });
                });

            modelBuilder.Entity("TaskManagementService.DBContext.Entities.ServiceTask", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            Description = "Clothes Package",
                            FinishDate = new DateTime(2020, 4, 12, 10, 51, 44, 921, DateTimeKind.Local).AddTicks(505),
                            Name = "Clothing",
                            StartDate = new DateTime(2020, 4, 12, 10, 51, 44, 915, DateTimeKind.Local).AddTicks(7741),
                            State = "inProgress"
                        },
                        new
                        {
                            TaskId = 2,
                            Description = "Bride Dress",
                            FinishDate = new DateTime(2020, 4, 12, 10, 51, 44, 921, DateTimeKind.Local).AddTicks(2580),
                            Name = "Dresses",
                            StartDate = new DateTime(2020, 4, 12, 10, 51, 44, 921, DateTimeKind.Local).AddTicks(2549),
                            State = "inProgress"
                        });
                });

            modelBuilder.Entity("TaskManagementService.DBContext.Entities.ServiceSubtask", b =>
                {
                    b.HasOne("TaskManagementService.DBContext.Entities.ServiceTask", "ServiceTask")
                        .WithMany("ServiceSubtask")
                        .HasForeignKey("TaskId");
                });
#pragma warning restore 612, 618
        }
    }
}
